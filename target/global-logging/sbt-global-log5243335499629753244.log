[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Ethan\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Ethan\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17.0.8)
[debug]       Load.loadUnit: plugins took 165.3727ms
[debug]       Load.loadUnit: defsScala took 0.8696ms
[debug] [Loading] Scanning directory C:\Users\Ethan\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Ethan\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 27.2942 ms
[debug]           Load.resolveProject(global-plugins) took 58.0829ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Ethan\.sbt\1.0\plugins, plugins: List(<none>))) took 112.9658ms
[debug] [Loading] Done in C:\Users\Ethan\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 144.4353ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6653ms
[debug]     Load.loadUnit(file:/C:/Users/Ethan/.sbt/1.0/plugins/, ...) took 328.8544ms
[debug]   Load.apply: load took 569.2713ms
[debug]   Load.apply: resolveProjects took 9.4608ms
[debug]   Load.apply: finalTransforms took 106.5305ms
[debug]   Load.apply: config.delegates took 13.4213ms
[debug]   Load.apply: Def.make(settings)... took 639.4041ms
[debug]   Load.apply: structureIndex took 140.7723ms
[debug]   Load.apply: mkStreams took 3.6256ms
[info] loading global plugins from C:\Users\Ethan\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3681.037ms
[debug]           Load.loadUnit: plugins took 36.3546ms
[debug]           Load.loadUnit: defsScala took 0.0068ms
[debug] [Loading] Scanning directory C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project
[debug]             Load.loadUnit: mkEval took 7.0192ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.2699 ms
[info] loading settings for project pollution-build from plugins.sbt,scalapb.sbt,idea1.sbt ...
[debug]               Load.resolveProject(pollution-build) took 6.0439ms
[debug]             Load.loadTransitive: finalizeProject(Project(id pollution-build, base: C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project, plugins: List(<none>))) took 10.2529ms
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project, returning: (pollution-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 262.5673ms
[debug]           Load.loadUnit: cleanEvalClasses took 112.4288ms
[debug]         Load.loadUnit(file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/project/, ...) took 412.6811ms
[debug]       Load.apply: load took 415.3667ms
[debug]       Load.apply: resolveProjects took 0.3034ms
[debug]       Load.apply: finalTransforms took 57.8707ms
[debug]       Load.apply: config.delegates took 0.5126ms
[debug]       Load.apply: Def.make(settings)... took 127.9573ms
[debug]       Load.apply: structureIndex took 60.8607ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1152.676ms
[debug]     Load.loadUnit: defsScala took 0.0054ms
[debug] [Loading] Scanning directory C:\Memoria Guerra\9no Semestre\PSFD\Pollution
[debug]       Load.loadUnit: mkEval took 0.4796ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtprotoc.ProtocPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.3608 ms
[info] loading settings for project pollution from build.sbt ...
[debug]         Load.resolveProject(pollution) took 73.3212ms
[debug]       Load.loadTransitive: finalizeProject(Project(id pollution, base: C:\Memoria Guerra\9no Semestre\PSFD\Pollution, plugins: List(<none>))) took 80.189ms
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution, returning: (pollution)
[debug]     Load.loadUnit: loadedProjectsRaw took 346.4972ms
[debug]     Load.loadUnit: cleanEvalClasses took 54.1508ms
[debug]   Load.loadUnit(file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/, ...) took 1554.5635ms
[debug] Load.apply: load took 1560.6225ms
[debug] Load.apply: resolveProjects took 0.2232ms
[debug] Load.apply: finalTransforms took 43.848ms
[debug] Load.apply: config.delegates took 0.6628ms
[debug] Load.apply: Def.make(settings)... took 96.6877ms
[debug] Load.apply: structureIndex took 35.6706ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to Pollution (in build file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * pollution / idePackagePrefix
[warn]   +- C:\Memoria Guerra\9no Semestre\PSFD\Pollution\build.sbt:7
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62468 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62468, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Pollution (in build file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/)
[debug] > Exec(idea-shell, None, None)
