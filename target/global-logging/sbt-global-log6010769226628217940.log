[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Ethan\AppData\Local\Temp\idea3.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Ethan\AppData\Local\Temp\idea3.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 17.0.8)
[debug]       Load.loadUnit: plugins took 195.232ms
[debug]       Load.loadUnit: defsScala took 0.9982ms
[debug] [Loading] Scanning directory C:\Users\Ethan\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Ethan\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.1321 ms
[debug]           Load.resolveProject(global-plugins) took 59.6022ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Ethan\.sbt\1.0\plugins, plugins: List(<none>))) took 112.7791ms
[debug] [Loading] Done in C:\Users\Ethan\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 149.5333ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.0211ms
[debug]     Load.loadUnit(file:/C:/Users/Ethan/.sbt/1.0/plugins/, ...) took 368.7481ms
[debug]   Load.apply: load took 625.4876ms
[debug]   Load.apply: resolveProjects took 8.9418ms
[debug]   Load.apply: finalTransforms took 79.9ms
[debug]   Load.apply: config.delegates took 12.1505ms
[debug]   Load.apply: Def.make(settings)... took 655.8636ms
[debug]   Load.apply: structureIndex took 128.4471ms
[debug]   Load.apply: mkStreams took 2.7272ms
[info] loading global plugins from C:\Users\Ethan\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3640.3917ms
[debug]           Load.loadUnit: plugins took 32.574ms
[debug]           Load.loadUnit: defsScala took 0.0072ms
[debug] [Loading] Scanning directory C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project
[debug]             Load.loadUnit: mkEval took 4.5007ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.295 ms
[info] loading settings for project pollution-build from plugins.sbt,scalapb.sbt,idea3.sbt ...
[debug]               Load.resolveProject(pollution-build) took 13.7973ms
[debug]             Load.loadTransitive: finalizeProject(Project(id pollution-build, base: C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project, plugins: List(<none>))) took 16.7506ms
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project, returning: (pollution-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 387.7584ms
[debug]           Load.loadUnit: cleanEvalClasses took 16.2658ms
[debug]         Load.loadUnit(file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/project/, ...) took 437.6807ms
[debug]       Load.apply: load took 439.7368ms
[debug]       Load.apply: resolveProjects took 0.1822ms
[debug]       Load.apply: finalTransforms took 16.573ms
[debug]       Load.apply: config.delegates took 0.7403ms
[debug]       Load.apply: Def.make(settings)... took 108.3894ms
[debug]       Load.apply: structureIndex took 36.1627ms
[debug]       Load.apply: mkStreams took 0.0019ms
[info] loading project definition from C:\Memoria Guerra\9no Semestre\PSFD\Pollution\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1036.3641ms
[debug]     Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Memoria Guerra\9no Semestre\PSFD\Pollution
[debug]       Load.loadUnit: mkEval took 0.3348ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtprotoc.ProtocPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtprotoc.ProtocPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtprotoc.ProtocPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.1808 ms
[info] loading settings for project pollution from build.sbt ...
[debug]         Load.resolveProject(pollution) took 57.5492ms
[debug]       Load.loadTransitive: finalizeProject(Project(id pollution, base: C:\Memoria Guerra\9no Semestre\PSFD\Pollution, plugins: List(<none>))) took 62.9345ms
[debug] [Loading] Done in C:\Memoria Guerra\9no Semestre\PSFD\Pollution, returning: (pollution)
[debug]     Load.loadUnit: loadedProjectsRaw took 411.7626ms
[debug]     Load.loadUnit: cleanEvalClasses took 41.7801ms
[debug]   Load.loadUnit(file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/, ...) took 1490.8811ms
[debug] Load.apply: load took 1493.4792ms
[debug] Load.apply: resolveProjects took 0.0928ms
[debug] Load.apply: finalTransforms took 41.9455ms
[debug] Load.apply: config.delegates took 0.5882ms
[debug] Load.apply: Def.make(settings)... took 106.8641ms
[debug] Load.apply: structureIndex took 39.9754ms
[debug] Load.apply: mkStreams took 0.0018ms
[info] set current project to Pollution (in build file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * pollution / idePackagePrefix
[warn]   +- C:\Memoria Guerra\9no Semestre\PSFD\Pollution\build.sbt:7
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 41090 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 41090, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Pollution (in build file:/C:/Memoria%20Guerra/9no%20Semestre/PSFD/Pollution/)
[debug] > Exec(idea-shell, None, None)
